"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyArrayBuffer = exports.str2ab = exports.getBigUint64 = exports.arrayBufferToString = exports.stringToArrayBuffer = void 0;
var arrayBufferToString = function (buffer, encoding) {
    if (encoding === void 0) { encoding = 'UTF-8'; }
    return new Promise(function (resolve, reject) {
        var blob = new Blob([buffer], { type: 'text/plain' });
        var reader = new FileReader();
        reader.onload = function (evt) {
            if (evt.target) {
                resolve(evt.target.result);
            }
            else {
                reject(new Error('Could not convert array to string!'));
            }
        };
        reader.readAsText(blob, encoding);
    });
};
exports.arrayBufferToString = arrayBufferToString;
var stringToArrayBuffer = function (text, encoding) {
    if (encoding === void 0) { encoding = 'UTF-8'; }
    return new Promise(function (resolve, reject) {
        var blob = new Blob([text], { type: "text/plain;charset=" + encoding });
        var reader = new FileReader();
        reader.onload = function (evt) {
            if (evt.target) {
                resolve(evt.target.result);
            }
            else {
                reject(new Error('Could not convert string to array!'));
            }
        };
        reader.readAsArrayBuffer(blob);
    });
};
exports.stringToArrayBuffer = stringToArrayBuffer;
var getBigUint64 = function (view, position, littleEndian) {
    if ("getBigUint64" in DataView.prototype) {
        return view.getBigUint64(position, littleEndian);
    }
    else {
        var lsb = BigInt(view.getUint32(position + (littleEndian ? 0 : 4), littleEndian));
        var gsb = BigInt(view.getUint32(position + (littleEndian ? 4 : 0), littleEndian));
        return lsb + BigInt(4294967296) * gsb;
    }
};
exports.getBigUint64 = getBigUint64;
var str2ab = function (str) {
    var buf = new ArrayBuffer(str.length); // 2 bytes for each char
    var bufView = new Uint8Array(buf);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
        bufView[i] = str.charCodeAt(i);
    }
    return bufView;
};
exports.str2ab = str2ab;
var copyArrayBuffer = function (source, position, dst) {
    var dataView = new DataView(source);
    var dstDataView = new DataView(dst);
    for (var i = 0; i < dataView.byteLength; i++) {
        var tmp = dataView.getUint8(i);
        dstDataView.setUint8(position + i, tmp);
    }
    return dst;
};
exports.copyArrayBuffer = copyArrayBuffer;
//# sourceMappingURL=strings.js.map