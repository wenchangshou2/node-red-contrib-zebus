"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DaemonLib = exports.DaemonEvents = exports.Proto = void 0;
var constantbackoff_1 = require("./backoff/constantbackoff");
var http_1 = require("./http");
var message_1 = require("./message");
var websocketBuilder_1 = require("./websocketBuilder");
var Proto;
(function (Proto) {
    Proto["BINARY"] = "binary";
    Proto["TEXT"] = "test";
})(Proto = exports.Proto || (exports.Proto = {}));
var DaemonEvents;
(function (DaemonEvents) {
    DaemonEvents["message"] = "message";
})(DaemonEvents = exports.DaemonEvents || (exports.DaemonEvents = {}));
var DaemonLib = /** @class */ (function () {
    function DaemonLib(url, name, options) {
        this.eventListeners = { message: [] };
        this.httpEnable = false;
        this.onMessageListeners = [];
        this.url = url;
        this.websocket = null;
        this.proto = Proto.TEXT;
        this.websocketConnectStatus = false;
        this.name = name;
        if (options.websocketEnable) {
            this.websocketPort = options.websocketPort;
            this.configWebsocket();
        }
        if (options.httpEnable) {
            this.httpPort = options.httpPort;
        }
        if (options.proto !== undefined) {
            this.proto = options.proto;
        }
        if (options.httpEnable) {
            this.httpEnable = options.httpEnable;
            this.httpClient = new http_1.HttpClient(url, this.httpPort);
        }
    }
    DaemonLib.prototype.onOpen = function (instance, ev) {
        this.websocketConnectStatus = true;
    };
    DaemonLib.prototype.onClose = function (instance, ev) {
        this.websocketConnectStatus = false;
    };
    DaemonLib.prototype.getWebsocketStatus = function () {
        return this.websocketConnectStatus;
    };
    DaemonLib.prototype.Register = function (instance) {
        var data = {
            "messageType": "RegisterToDaemon",
            "SocketName": this.name,
            "SocketType": "Controller",
            "proto": this.proto
        };
        instance.send(JSON.stringify(data));
    };
    DaemonLib.prototype.MessageReployProcess = function (instance, message, newMessage) {
        return __awaiter(this, void 0, void 0, function () {
            var buffer, receiverName, senderName, sendMessage;
            return __generator(this, function (_a) {
                if (message.getproto() === 'buffer') {
                    message.settopic('/zebus');
                    message.setbody(newMessage);
                    buffer = message.getBuffer();
                    try {
                        instance.send(buffer);
                    }
                    catch (err) {
                        console.log('send websocket err', err);
                    }
                }
                else {
                    receiverName = message.getReceiverName();
                    senderName = message.getSenderName();
                    sendMessage = JSON.parse(newMessage);
                    sendMessage.receiverName = senderName;
                    sendMessage.senderName = receiverName;
                    instance.send(JSON.stringify(sendMessage));
                }
                return [2 /*return*/];
            });
        });
    };
    DaemonLib.prototype.binaryProcess = function (instance, msg) {
        return __awaiter(this, void 0, void 0, function () {
            var message, param;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        message = new message_1.Message();
                        return [4 /*yield*/, message.SetBuffer(msg)];
                    case 1:
                        _a.sent();
                        param = {
                            message: message,
                            callback: function (str) {
                                _this.MessageReployProcess(instance, message, str);
                            }
                        };
                        this.handleEvent(DaemonEvents.message, param);
                        return [2 /*return*/];
                }
            });
        });
    };
    DaemonLib.prototype.textProcess = function (instance, msg) {
        var _this = this;
        var message = new message_1.Message();
        try {
            var data = JSON.parse(msg);
            if (data.Service === 'registerCall') {
                this.Register(instance);
                return;
            }
            if (data.Action === 'RegisterToDaemon') {
                return;
            }
            message.setReceiverName(data.receiverName);
            message.setSenderName(data.senderName);
            var params = {
                message: message,
                callback: function (str) {
                    _this.MessageReployProcess(instance, message, str);
                }
            };
            this.handleEvent(DaemonEvents.message, params);
        }
        catch (err) {
            console.log('err', err);
        }
    };
    DaemonLib.prototype.OnMessage = function (listener, options) {
        this.AddEventListener(DaemonEvents.message, listener, options);
        return this;
    };
    DaemonLib.prototype.onMessage = function (instance, ev) {
        var self = this;
        var dataType = typeof ev.data;
        if (dataType === 'string') {
            this.textProcess(instance, ev.data);
        }
        else if (dataType === 'object') {
            var reader_1 = new FileReader();
            reader_1 = new FileReader();
            reader_1.onload = function () {
                self.binaryProcess(instance, reader_1.result);
            };
            reader_1.readAsArrayBuffer(ev.data);
        }
    };
    DaemonLib.prototype.configWebsocket = function () {
        var ws = new websocketBuilder_1.WebsocketBuilder('ws://' + this.url + ":" + this.websocketPort)
            .withBackoff(new constantbackoff_1.ConstantBackoff(500))
            .onOpen(this.onOpen.bind(this))
            .onClose(this.onClose.bind(this))
            .onMessage(this.onMessage.bind(this))
            .build();
        this.websocket = ws;
    };
    DaemonLib.prototype.AddEventListener = function (type, listener, options) {
        var eventListener = { listener: listener, options: options };
        var eventListeners = this.eventListeners[type];
        eventListeners.push(eventListener);
    };
    DaemonLib.prototype.removeEventListener = function (type, listener, options) {
        this.eventListeners[type] =
            this.eventListeners[type]
                .filter(function (l) {
                return l.listener !== listener && (l.options === undefined || l.options !== options);
            });
    };
    DaemonLib.prototype.dispatchEvent = function (type, ev) {
        var _this = this;
        var listeners = this.eventListeners[type];
        var onceListeners = [];
        listeners.forEach(function (l) {
            l.listener(ev); // call listener
            if (l.options !== undefined && l.options.once)
                onceListeners.push(l);
        });
        onceListeners.forEach(function (l) { return _this.removeEventListener(type, l.listener, l.options); }); // remove 'once'-listeners
    };
    DaemonLib.prototype.handleEvent = function (type, ev) {
        this.dispatchEvent(type, ev); // forward to all listeners
    };
    DaemonLib.prototype.Pub = function (topic, body) {
        if (!this.httpEnable || this.httpClient === undefined) {
            return Promise.reject("http没有启动");
        }
        return this.httpClient.Pub(topic, body);
    };
    DaemonLib.prototype.GetClients = function () {
        if (!this.httpEnable || this.httpClient === undefined) {
            return Promise.reject("http没有启动");
        }
        return this.httpClient.getClients();
    };
    DaemonLib.prototype.PubV2 = function (topic, body, timeout, defer) {
        if (!this.httpEnable || this.httpClient === undefined) {
            return Promise.reject("http没有启动");
        }
        return this.httpClient.PubV2(topic, body, timeout, defer);
    };
    return DaemonLib;
}());
exports.DaemonLib = DaemonLib;
//# sourceMappingURL=daemon.js.map