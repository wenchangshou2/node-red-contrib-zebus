"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
var strings_1 = require("./strings/strings");
var Message = /** @class */ (function () {
    function Message() {
        this.ID = 0;
        this.topic = "";
        this.body = "";
        this.attempts = 0;
        this.timestamp = BigInt(0);
        this.proto = "text";
        this.IDBuffer = new ArrayBuffer(0);
        this.ReceiverName = '';
        this.SenderName = '';
    }
    Message.prototype.getSenderName = function () {
        return this.SenderName;
    };
    Message.prototype.setSenderName = function (v) {
        this.SenderName = v;
    };
    Message.prototype.getReceiverName = function () {
        return this.ReceiverName;
    };
    Message.prototype.setReceiverName = function (v) {
        this.ReceiverName = v;
    };
    Message.prototype.getID = function () {
        return this.ID;
    };
    Message.prototype.setID = function (v) {
        this.ID = v;
    };
    Message.prototype.gettopic = function () {
        return this.topic;
    };
    Message.prototype.settopic = function (v) {
        this.topic = v;
    };
    Message.prototype.getbody = function () {
        return this.body;
    };
    Message.prototype.setbody = function (v) {
        this.body = v;
    };
    Message.prototype.getattempts = function () {
        return this.attempts;
    };
    Message.prototype.setattempts = function (v) {
        this.attempts = v;
    };
    Message.prototype.gettimestamp = function () {
        return this.timestamp;
    };
    Message.prototype.settimestamp = function (v) {
        this.timestamp = v;
    };
    Message.prototype.getproto = function () {
        return this.proto;
    };
    Message.prototype.setproto = function (v) {
        this.proto = v;
    };
    Message.prototype.SetBuffer = function (buffer) {
        return __awaiter(this, void 0, void 0, function () {
            var dateView, timestamp, Attempts, _topicSize, topic, topicStr, id, body, bodyStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dateView = new DataView(buffer);
                        timestamp = strings_1.getBigUint64(dateView, 0);
                        Attempts = dateView.getUint16(8);
                        _topicSize = dateView.getUint16(10);
                        topic = buffer.slice(12, 12 + _topicSize);
                        return [4 /*yield*/, strings_1.arrayBufferToString(topic)];
                    case 1:
                        topicStr = _a.sent();
                        id = dateView.getUint16(12 + _topicSize);
                        this.IDBuffer = buffer.slice(12 + _topicSize, 12 + _topicSize + 16);
                        body = buffer.slice(12 + _topicSize + 16);
                        return [4 /*yield*/, strings_1.arrayBufferToString(body)];
                    case 2:
                        bodyStr = _a.sent();
                        this.ID = id;
                        this.topic = topicStr;
                        this.body = bodyStr;
                        this.attempts = Attempts;
                        this.timestamp = timestamp;
                        this.proto = "buffer";
                        return [2 /*return*/];
                }
            });
        });
    };
    Message.prototype.getBuffer = function () {
        var milliseconds = new Date().getTime();
        this.settimestamp(BigInt(milliseconds));
        var bufferSize = 8 + 2 + this.topic.length + 16 + this.body.length + 2;
        var buffer = new ArrayBuffer(bufferSize);
        var dataView = new DataView(buffer);
        dataView.setBigUint64(0, this.timestamp);
        dataView.setUint16(8, this.attempts);
        dataView.setUint16(10, this.topic.length);
        var topicBuff = strings_1.str2ab(this.topic);
        for (var i = 0; i < this.topic.length; i++) {
            dataView.setUint8(12 + i, topicBuff[i]);
        }
        strings_1.copyArrayBuffer(this.IDBuffer, 12 + this.topic.length, buffer);
        var bodyBuff = strings_1.str2ab(this.body);
        for (var i = 0; i < bodyBuff.length; i++) {
            var idx = 12 + this.topic.length + 16 + i;
            var d = bodyBuff[i];
            dataView.setUint8(idx, d);
        }
        return buffer;
    };
    return Message;
}());
exports.Message = Message;
//# sourceMappingURL=message.js.map